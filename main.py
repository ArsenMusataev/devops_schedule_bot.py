import os
import logging
from datetime import datetime, timedelta
from typing import List, Tuple
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
WORK_SCHEDULE = {
    '2025-06-21': {'type': 'day_off', 'available': [('09:00', '11:00')]},
    '2025-06-22': {'type': 'day_shift', 'work': ('08:00', '20:00'), 'travel': 90},
    '2025-06-23': {'type': 'night_shift', 'work': ('20:00', '08:00'), 'travel': 90},
    '2025-06-24': {'type': 'day_off', 'available': [('09:00', '23:59')]},
    '2025-06-25': {'type': 'day_off', 'available': [('00:00', '23:59')]},
}

STUDY_TOPICS = [
    "–û—Å–Ω–æ–≤—ã Linux: —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
    "–†–∞–±–æ—Ç–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º: pipes, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä—ã",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: ps, top, kill, jobs, bg, fg",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏: apt, yum, dpkg, rpm",
    "–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: grep, sed, awk, cut, sort",
    "–°–∫—Ä–∏–ø—Ç–∏–Ω–≥ –Ω–∞ Bash: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É—Å–ª–æ–≤–∏—è, —Ü–∏–∫–ª—ã",
    "–§–∞–π–ª–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã: chmod, chown",
    "–°–µ—Ç–µ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ping, netstat, ss, curl, wget",
    "–°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–º–æ–Ω—ã –∏ —Å–ª—É–∂–±—ã: systemd, journalctl",
    "–û—Å–Ω–æ–≤—ã Git: init, commit, push, pull, merge",
    "–û—Å–Ω–æ–≤—ã Docker: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, Dockerfile",
    "–û—Å–Ω–æ–≤—ã CI/CD: –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, Jenkins, GitLab CI",
    "–û—Å–Ω–æ–≤—ã –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: AWS/GCP/Azure",
    "–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∫ –∫–æ–¥–∞: Terraform",
    "–û—Å–Ω–æ–≤—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏: Kubernetes, Docker Swarm"
]

class StudyScheduler:
    def __init__(self):
        self.user_schedule = WORK_SCHEDULE
        self.study_topics = STUDY_TOPICS
        self.current_topic_index = 0
        self.user_settings = {
            'morning_study': True,
            'evening_study': False,
            'min_study_time': 30,
            'max_study_time': 120,
            'notifications': True
        }

    def get_available_time(self, date_str: str) -> List[Tuple[str, str]]:
        day_info = self.user_schedule.get(date_str, {})

        if day_info.get('type') == 'day_off':
            return day_info.get('available', [('09:00', '23:59')])

        elif day_info.get('type') == 'day_shift':
            work_start = datetime.strptime(day_info['work'][0], '%H:%M').time()
            travel_time = day_info.get('travel', 90)
            morning_start = datetime.strptime('05:00', '%H:%M').time()
            morning_end = (datetime.combine(datetime.today(), work_start) -
                           timedelta(minutes=travel_time)).time()

            if morning_start < morning_end:
                return [(morning_start.strftime('%H:%M'), morning_end.strftime('%H:%M'))]

        elif day_info.get('type') == 'night_shift':
            work_start = datetime.strptime(day_info['work'][0], '%H:%M').time()
            travel_time = day_info.get('travel', 90)
            evening_start = (datetime.combine(datetime.today(), work_start) -
                             timedelta(minutes=travel_time)).time()
            evening_end = datetime.strptime('23:59', '%H:%M').time()

            if evening_start < evening_end:
                return [(evening_start.strftime('%H:%M'), evening_end.strftime('%H:%M'))]

        return []

    def get_today_study_plan(self) -> str:
        today = datetime.now().strftime('%Y-%m-%d')
        available_time = self.get_available_time(today)

        if not available_time:
            return "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"

        topic = self.study_topics[self.current_topic_index]
        self.current_topic_index = (self.current_topic_index + 1) % len(self.study_topics)

        plan = f"üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {today}:\n"
        plan += f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {', '.join([f'{s}-{e}' for s, e in available_time])}\n"
        plan += f"üéØ –¢–µ–º–∞: {topic}\n"
        plan += "üîπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: 1-2 —á–∞—Å–∞\n"
        plan += "üîπ –°–æ–≤–µ—Ç: –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç (–º–µ—Ç–æ–¥ Pomodoro)\n"
        return plan

    def get_next_study_topic(self) -> str:
        topic = self.study_topics[self.current_topic_index]
        self.current_topic_index = (self.current_topic_index + 1) % len(self.study_topics)
        return topic

scheduler = StudyScheduler()

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ Linux –∏ DevOps.\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/next - –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
        "/schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
    )
    if update.effective_chat.id == ADMIN_ID:
        text += "\n‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/add_schedule - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
    await update.message.reply_text(text)

async def today_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan = scheduler.get_today_study_plan()
    await update.message.reply_text(plan)

async def next_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = scheduler.get_next_study_topic()
    await update.message.reply_text(f"–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\nüéØ {topic}")

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule_text = "üìÖ –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    for date, info in scheduler.user_schedule.items():
        schedule_text += f"üìå {date}: {info['type']}\n"
        if 'work' in info:
            schedule_text += f"   –†–∞–±–æ—Ç–∞: {info['work'][0]} - {info['work'][1]}\n"
        if 'available' in info:
            slots = ', '.join([f"{start}-{end}" for start, end in info['available']])
            schedule_text += f"   –î–æ—Å—Ç—É–ø–Ω–æ: {slots}\n"
        schedule_text += "\n"
    await update.message.reply_text(schedule_text)

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", callback_data='morning_study')],
        [InlineKeyboardButton("–í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", callback_data='evening_study')],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='min_time')],
        [InlineKeyboardButton("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='max_time')],
        [InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    settings = scheduler.user_settings
    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        f"üî∏ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è: {'–≤–∫–ª' if settings['morning_study'] else '–≤—ã–∫–ª'}\n"
        f"üî∏ –í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è: {'–≤–∫–ª' if settings['evening_study'] else '–≤—ã–∫–ª'}\n"
        f"üî∏ –ú–∏–Ω. –≤—Ä–µ–º—è: {settings['min_study_time']} –º–∏–Ω\n"
        f"üî∏ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {settings['max_study_time']} –º–∏–Ω\n"
        f"üî∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª' if settings['notifications'] else '–≤—ã–∫–ª'}\n"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    settings = scheduler.user_settings

    if data == 'morning_study':
        settings['morning_study'] = not settings['morning_study']
    elif data == 'evening_study':
        settings['evening_study'] = not settings['evening_study']
    elif data == 'notifications':
        settings['notifications'] = not settings['notifications']

    await settings_menu(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    if ADMIN_ID:
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {context.error}")
        except Exception:
            pass

# === –ó–∞–ø—É—Å–∫ ===

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('today', today_plan))
    app.add_handler(CommandHandler('next', next_topic))
    app.add_handler(CommandHandler('schedule', show_schedule))
    app.add_handler(CommandHandler('settings', settings_menu))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()